import React, { useEffect } from "react"
import { Button, Checkbox, Details, ErrorText, Fieldset, FormGroup, HintText, InputField, LabelText, Link, Paragraph, Select } from "govuk-react"
import { SubmitHandler, useForm, UseFormReturn } from "react-hook-form"
import RHFDateField from "../components/rhfDateField"
import SignaturePadLib from "signature_pad"
import { Route, Routes, useNavigate } from "react-router-dom"
import { PDFDocument, StandardFonts } from "pdf-lib"

type TFieldValues = {
    firstName: string,
    lastName: string,
    dob: { day?: string, month?: string, year?: string },
    email: string,
    phone: string,
    addressLine1: string,
    addressLine2: string,
    addressLine3: string,
    addressPostcode: string,
    useAlternativeAddress: boolean,
    alternativeAddressLine1: string,
    alternativeAddressLine2: string,
    alternativeAddressLine3: string,
    alternativeAddressPostcode: string,
    alternativeAddressReason: string,
    alternativeAddressReasonOther: string,
    signatureProvided: boolean,
    signatureDataUri: string,
}

const PAGE_1_FIELDS = ['firstName', 'lastName', 'dob', 'email', 'phone', 'addressLine1', 'addressLine2', 'addressLine3', 'addressPostcode', 'useAlternativeAddress', 'alternativeAddressLine1', 'alternativeAddressLine2', 'alternativeAddressLine3', 'alternativeAddressPostcode', 'alternativeAddressReason', 'alternativeAddressReasonOther'] as const

const postcodeRegex = /^([A-PR-UWYZ0-9][A-HK-Y0-9][AEHMNPRTVXY0-9]?[ABEHMNPRVWXY0-9]?[0-9][ABD-HJLN-UW-Z]{2}|GIR0AA)$/i;

// base64 encoded ../resources/template.pdf
const templateBase64 = ""

const templateTextFieldLocations = {
    lastName: { x: 50, y: 625, size: 12 },
    firstName: { x: 50, y: 584, size: 12 },

    addressLine1: { x: 50, y: 541, size: 12 },
    addressLine2: { x: 50, y: 521, size: 12 },
    addressLine3: { x: 50, y: 501, size: 12 },
    addressPostcode: { x: 200, y: 481, size: 12 },

    phone: { x: 50, y: 439, size: 12 },
    email: { x: 50, y: 397, size: 12 },

    durationPermanentCheckbox: { x: 46.25, y: 252.5, size: 18 },

    alternativeAddressLine1: { x: 328, y: 597, size: 12 },
    alternativeAddressLine2: { x: 328, y: 577, size: 12 },
    alternativeAddressLine3: { x: 328, y: 557, size: 12 },
    alternativeAddressPostcode: { x: 478, y: 536, size: 12 },

    alternativeAddressReason: { x: 328, y: 484, size: 12 },

    dob0: { x: 332, y: 293, size: 24 },
    dob1: { x: 356, y: 293, size: 24 },
    dob2: { x: 394, y: 293, size: 24 },
    dob3: { x: 418, y: 293, size: 24 },
    dob4: { x: 455, y: 293, size: 24 },
    dob5: { x: 479, y: 293, size: 24 },
    dob6: { x: 505, y: 293, size: 24 },
    dob7: { x: 530, y: 293, size: 24 },

    date0: { x: 400, y: 49, size: 12 },
    date1: { x: 414, y: 49, size: 12 },
    date2: { x: 437, y: 49, size: 12 },
    date3: { x: 451, y: 49, size: 12 },
    date4: { x: 474, y: 49, size: 12 },
    date5: { x: 488, y: 49, size: 12 },
    date6: { x: 502, y: 49, size: 12 },
    date7: { x: 516, y: 49, size: 12 },
}

const templateSigLocation = { x: 316, y: 155, width: 242, height: 242 / 3.24324324 }

const PostalVoteForm = ({ onSuccess }: { onSuccess: () => void }) => {
    const form = useForm<TFieldValues>({ reValidateMode: 'onSubmit' })
    const navigate = useNavigate()

    const onSubmit: SubmitHandler<TFieldValues> = async (data) => {
        // TODO: create PDF server side and automatically email it to the user's local electoral registration office based on postcode

        const pdfDoc = await PDFDocument.load(templateBase64)
        const page = pdfDoc.getPages()[0]
        const helveticaFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold)
        page.setFont(helveticaFont)

        // for (let i = 0; i < 1000; i += 10) {
        //     page.drawLine({
        //         start: { x: i, y: 0 },
        //         end: { x: i, y: 10000 },
        //         thickness: i % 50 === 0 ? 2 : 0,
        //         opacity: i % 50 === 0 ? 0.2 : 0.1,
        //     })
        //     if (i % 50 === 0) {
        //         page.drawText(String(i), {
        //             x: i,
        //             y: 0,
        //             size: 8,
        //             font: helveticaFont,
        //         })
        //     }
        // }

        // for (let i = 0; i < 1000; i += 10) {
        //     page.drawLine({
        //         start: { x: 0, y: i },
        //         end: { x: 10000, y: i },
        //         thickness: i % 50 === 0 ? 2 : 0,
        //         opacity: i % 50 === 0 ? 0.2 : 0.1,
        //     })
        //     if (i % 50 === 0) {
        //         page.drawText(String(i), {
        //             x: 0,
        //             y: i,
        //             size: 8,
        //             font: helveticaFont,
        //         })
        //     }
        // }

        page.drawText(data.lastName, templateTextFieldLocations.lastName)
        page.drawText(data.firstName, templateTextFieldLocations.firstName)

        page.drawText(data.addressLine1, templateTextFieldLocations.addressLine1)
        page.drawText(data.addressLine2, templateTextFieldLocations.addressLine2)
        page.drawText(data.addressLine3, templateTextFieldLocations.addressLine3)
        page.drawText(data.addressPostcode, templateTextFieldLocations.addressPostcode)

        page.drawText(data.phone, templateTextFieldLocations.phone)
        page.drawText(data.email, templateTextFieldLocations.email)

        page.drawText('×', templateTextFieldLocations.durationPermanentCheckbox)

        if (data.useAlternativeAddress) {
            page.drawText(data.alternativeAddressLine1, templateTextFieldLocations.alternativeAddressLine1)
            page.drawText(data.alternativeAddressLine2, templateTextFieldLocations.alternativeAddressLine2)
            page.drawText(data.alternativeAddressLine3, templateTextFieldLocations.alternativeAddressLine3)
            page.drawText(data.alternativeAddressPostcode, templateTextFieldLocations.alternativeAddressPostcode)

            const reason = data.alternativeAddressReason === "Other" ? data.alternativeAddressReasonOther : data.alternativeAddressReason;
            page.drawText(reason, templateTextFieldLocations.alternativeAddressReason)
        }

        const dob = String(Number(data.dob.day)).padStart(2, '0') + String(Number(data.dob.month)).padStart(2, '0') + String(Number(data.dob.year));

        page.drawText(dob[0], templateTextFieldLocations.dob0)
        page.drawText(dob[1], templateTextFieldLocations.dob1)
        page.drawText(dob[2], templateTextFieldLocations.dob2)
        page.drawText(dob[3], templateTextFieldLocations.dob3)
        page.drawText(dob[4], templateTextFieldLocations.dob4)
        page.drawText(dob[5], templateTextFieldLocations.dob5)
        page.drawText(dob[6], templateTextFieldLocations.dob6)
        page.drawText(dob[7], templateTextFieldLocations.dob7)

        const sig = await pdfDoc.embedPng(data.signatureDataUri)
        page.drawImage(sig, templateSigLocation)

        const date = String(new Date().getDate()).padStart(2, '0') + String(new Date().getMonth() + 1).padStart(2, '0') + String(new Date().getFullYear());

        page.drawText(date[0], templateTextFieldLocations.date0)
        page.drawText(date[1], templateTextFieldLocations.date1)
        page.drawText(date[2], templateTextFieldLocations.date2)
        page.drawText(date[3], templateTextFieldLocations.date3)
        page.drawText(date[4], templateTextFieldLocations.date4)
        page.drawText(date[5], templateTextFieldLocations.date5)
        page.drawText(date[6], templateTextFieldLocations.date6)
        page.drawText(date[7], templateTextFieldLocations.date7)

        const pdfBytes = await pdfDoc.save()
        const blob = new Blob([pdfBytes], { type: 'application/pdf' })
        const url = URL.createObjectURL(blob)
        window.open(url)

        onSuccess()
    }

    return (
        <form onSubmit={form.handleSubmit(onSubmit)}>
            <Routes>
                <Route path="/your-details" element={
                    <PostalVoteFormPage1 form={form} />
                } />
                <Route path="/declaration" element={
                    <PostalVoteFormPage2 form={form} />
                } />
            </Routes>
        </form>
    )
}

const PostalVoteFormPage1 = ({ form }: { form: UseFormReturn<TFieldValues> }) => {
    const navigate = useNavigate()

    const validateFirstName = (value?: string): string | undefined => value?.length ? undefined : 'Please enter your first name';
    const validateLastName = (value?: string): string | undefined => value?.length ? undefined : 'Please enter your last name';
    const validateDOB: (value?: {
        year?: number | string;
        month?: number | string;
        day?: number | string;
    }) => string | undefined = (value) => {
        if (value && value.year && value.month && value.day) {
            const year = Number(value.year);
            const month = Number(value.month) - 1;
            const day = Number(value.day);
            const testDate = new Date(year, month, day);
            if (
                // Check date is in the past
                testDate < new Date() &&
                // Is after 1900
                testDate.getFullYear() > 1900 &&
                // and a real date resolves to the inputted date (e.g. month is not 13, not 29th February on a non leap year)
                testDate.getFullYear() === year &&
                testDate.getMonth() === month &&
                testDate.getDate() === day
            ) {
                return undefined;
            }
            return 'Please enter a valid date';
        }
        return 'Please enter your date of birth';
    };
    const validateAddressLine1 = (value?: string): string | undefined => value?.length ? undefined : 'Please enter your address';
    const validatePostcode = (value?: string): string | undefined => {
        if (value === undefined || value.length === 0) return 'Please enter your postcode';
        if (!postcodeRegex.test(value.replace(/\s/g, ''))) return 'Please enter a valid postcode';
    }
    const validateEmail = (value?: string): string | undefined => {
        if (value && !/^\S+@\S+\.\S+$/.test(value.trim())) return 'Please enter a valid email';
        return
    }
    const validateAlternativeAddressReasonOther = (value?: string): string | undefined => value?.length ? undefined : 'Please enter a reason';

    return (
        <Fieldset>
            <Fieldset.Legend size="XLARGE" mb={4}>
                Your details
            </Fieldset.Legend>

            <HintText>Enter your name in full, as it appears on official documents.</HintText>
            <InputField
                mb={4}
                meta={{ error: form.formState.errors.firstName?.message, touched: true }}
                input={form.register('firstName', { validate: validateFirstName })}
            // autoComplete="given-name"
            >
                First name
            </InputField>
            <InputField
                mb={4}
                meta={{ error: form.formState.errors.lastName?.message, touched: true }}
                input={form.register('lastName', { validate: validateLastName })}
            // autoComplete="family-name"
            >
                Last name
            </InputField>
            <RHFDateField
                mb={8}
                errorText={(form.formState.errors?.dob as undefined | { message: string })?.message}
                input={form.register('dob', {
                    validate: validateDOB,
                })}
            >
                Date of birth
            </RHFDateField>

            <HintText>Providing an email and phone number gives your electoral registration office a way to contact you about your application.</HintText>
            <InputField
                mb={4}
                meta={{ error: form.formState.errors.email?.message, touched: true }}
                input={form.register('email', { validate: validateEmail })}
            // autoComplete="email"
            >
                Email address (optional)
            </InputField>
            <InputField
                mb={8}
                meta={{ error: form.formState.errors.phone?.message, touched: true }}
                input={form.register('phone')}
            // autoComplete="tel"
            >
                Phone number (optional)
            </InputField>


            <HintText>Enter the address where you are registered to vote.</HintText>
            <InputField
                mb={4}
                meta={{ error: form.formState.errors.addressLine1?.message, touched: true }}
                input={form.register('addressLine1', { validate: validateAddressLine1 })}
            // autoComplete="address-line1"
            >
                Address line 1
            </InputField>
            <InputField
                mb={4}
                meta={{ error: form.formState.errors.addressLine2?.message, touched: true }}
                input={form.register('addressLine2')}
            // autoComplete="address-line2"
            >
                Address line 2 (optional)
            </InputField>
            <InputField
                mb={4}
                meta={{ error: form.formState.errors.addressLine3?.message, touched: true }}
                input={form.register('addressLine3')}
                // autoComplete="address-level2"
                // @ts-ignore
                style={{ width: 'calc(max(66%, 16rem))' }}
            >
                Town or city (optional)
            </InputField>
            <InputField
                mb={4}
                meta={{ error: form.formState.errors.addressPostcode?.message, touched: true }}
                input={form.register('addressPostcode', { validate: validatePostcode })}
                // autoComplete="postal-code"
                // @ts-ignore
                style={{ width: '16rem' }}
            >
                Postcode
            </InputField>

            <Checkbox
                type="checkbox"
                {...form.register('useAlternativeAddress')}
            >
                Send my ballot paper to a different address
            </Checkbox>

            {form.watch('useAlternativeAddress', false) && <>
                <HintText margin={{ direction: 'top', size: 4 }}>Enter the address where you want your ballot paper sent.</HintText>
                <InputField
                    mb={4}
                    meta={{ error: form.formState.errors.alternativeAddressLine1?.message, touched: true }}
                    input={form.register('alternativeAddressLine1', {
                        validate: (s) => {
                            if (form.watch('useAlternativeAddress', false)) return validateAddressLine1(s)
                        }
                    })}
                // autoComplete="address-line1"
                >
                    Address line 1
                </InputField>
                <InputField
                    mb={4}
                    meta={{ error: form.formState.errors.alternativeAddressLine2?.message, touched: true }}
                    input={form.register('alternativeAddressLine2')}
                // autoComplete="address-line2"
                >
                    Address line 2 (optional)
                </InputField>
                <InputField
                    mb={4}
                    meta={{ error: form.formState.errors.alternativeAddressLine3?.message, touched: true }}
                    input={form.register('alternativeAddressLine3')}
                    // autoComplete="address-level2"
                    // @ts-ignore
                    style={{ width: 'calc(max(66%, 16rem))' }}
                >
                    Town or city (optional)
                </InputField>
                <InputField
                    mb={4}
                    meta={{ error: form.formState.errors.alternativeAddressPostcode?.message, touched: true }}
                    input={form.register('alternativeAddressPostcode', {
                        validate: (s) => {
                            if (form.watch('useAlternativeAddress', false)) return validatePostcode(s)
                        }
                    })}
                    // autoComplete="postal-code"
                    // @ts-ignore
                    style={{ width: '16rem' }}
                >
                    Postcode
                </InputField>

                <Select
                    mb={4}
                    label="Why would you like your ballot paper sent to this address?"
                    input={form.register('alternativeAddressReason')}
                    meta={{ error: form.formState.errors.alternativeAddressReason?.message, touched: true }}
                >
                    <option value="Working away from home">Working away from home</option>
                    <option value="Studying away from home">Studying away from home</option>
                    <option value="Living away from home">Living away from home</option>
                    <option value="On holiday">On holiday</option>
                    <option value="Other">Other</option>
                </Select>

                {form.watch('alternativeAddressReason', '') === 'Other' && <>
                    <InputField
                        mb={4}
                        meta={{ error: form.formState.errors.alternativeAddressReasonOther?.message, touched: true }}
                        input={form.register('alternativeAddressReasonOther', {
                            validate: (s) => {
                                if (form.watch('useAlternativeAddress', false) && form.watch('alternativeAddressReason', '') === 'Other') return validateAlternativeAddressReasonOther(s)
                            }
                        })}
                    >
                        Your other reason
                    </InputField>
                </>}
            </>}

            <Button
                margin={{ direction: 'top', size: 4 }}
                disabled={form.formState.isSubmitting}
                onClick={async (e) => {
                    e.preventDefault()
                    const valid = await form.trigger(PAGE_1_FIELDS)
                    if (valid) {
                        navigate('/postal-vote-form/declaration')
                    }
                }}
            >
                Continue
            </Button>
        </Fieldset>
    )
}

const PostalVoteFormPage2 = ({ form }: { form: UseFormReturn<TFieldValues> }) => {
    const navigate = useNavigate()
    const [pad, setPad] = React.useState<SignaturePadLib | null>(null)

    // Check we haven't jumped into the middle of the flow
    useEffect(() => {
        // By this point we should have a first name
        // If we don't, it probably means we jumped into the middle of the flow
        // TODO: maybe we should just do this with something attached to the window object?
        if (form.watch('firstName') === undefined) {
            // TODO: have an error page which is explicitly for this?
            console.error('User appears to have started on declaration page... redirecting to earlier in flow')
            navigate('/postal-vote-form/your-details')
        }
    }, [form, navigate])


    // Register virtual form fields
    useEffect(() => {
        form.register('signatureProvided', {
            validate: (value) => {
                if (!value) {
                    if (navigator.maxTouchPoints > 0) return "Please provide your signature"
                    return "Please provide your signature. Hold down your left mouse button while moving your mouse in the box below to draw your signature."
                }
            }
        })
    }, [form])

    return (<Fieldset>
        <Fieldset.Legend size="XLARGE" mb={4}>
            Declaration
        </Fieldset.Legend>
        <HintText>Declaration: As far as I know, the details on this form are true and accurate.</HintText>
        <HintText mb={6}>I understand that to provide false information on this form is an offence, punishable on conviction by imprisonment of up to two years and/or a fine.</HintText>

        <SignaturePad
            meta={{ error: form.formState.errors.signatureProvided?.message }}
            onLoad={setPad}
            onTouchedChanged={(touched) => form.setValue('signatureProvided', touched)}
        />

        <Details summary="I can't provide a signature">
            <Paragraph>If you can't provide a signature or consistent signature due to a disability or inability to read or write, you should contact your local electoral registration office.</Paragraph>

            {/* TODO: use postcode to determine local ERO */}

            <p>There is additional guidance on the <Link href="https://www.electoralcommission.org.uk/running-electoral-registration-wales/absent-voting/postal-voting/signature-waivers-postal-vote-applications" target="_blank">electoral commision website</Link>.</p>
        </Details>

        <Button
            margin={{ direction: 'top', size: 4 }}
            disabled={form.formState.isSubmitting}
            type="submit"
            onClick={() => {
                // we do this on submit rather than update for performance
                if (pad) {
                    form.setValue('signatureDataUri', pad.toDataURL("image/png"))
                }

                // default action will then run after this and trigger submit of form
            }}
        >
            Submit
        </Button>
    </Fieldset>)
}

const SignaturePad = ({ onLoad, meta, onTouchedChanged }: { onLoad: (s: SignaturePadLib) => void, meta: { error?: string }, onTouchedChanged: (touched: boolean) => void }) => {
    const canvasRef = React.useRef<HTMLCanvasElement>(null);
    const [pad, setPad] = React.useState<SignaturePadLib | null>(null);
    const [touched, setTouched] = React.useState(false);

    React.useEffect(() => {
        if (canvasRef.current != null) {
            const canvas = canvasRef.current
            const s = new SignaturePadLib(canvas, { minDistance: 1 });
            s.on()
            setPad(s);

            return () => s.off()
        }
    }, [])

    React.useEffect(() => {
        if (pad && canvasRef.current) {
            const canvas = canvasRef.current

            onLoad(pad)

            const onBeginStroke = () => {
                setTouched(true)
                onTouchedChanged(true)
            }
            pad.addEventListener('beginStroke', onBeginStroke)

            const resizeCanvas = () => {
                // Canvas not actually changing size
                if (canvas.width === canvas.offsetWidth) {
                    return
                }

                // This part causes the canvas to be cleared
                canvas.width = canvas.offsetWidth;
                canvas.height = canvas.offsetWidth / 3.24324324;
                canvas.getContext("2d")?.scale(1, 1);

                // Resizing the canvas clears it. To make the state of the SignaturePadLib
                // consistent with the canvas, we clear it manually.
                pad.clear();
                setTouched(false)
                onTouchedChanged(false)
            }

            window.addEventListener('resize', resizeCanvas);
            resizeCanvas();

            return () => {
                pad.removeEventListener('beginStroke', onBeginStroke)
                window.removeEventListener('resize', resizeCanvas)
            }
        }
    }, [pad, onLoad, onTouchedChanged])

    return <>
        <div>
            <FormGroup error={!!meta.error}>
                <LabelText>
                    Signature
                </LabelText>
                <HintText>
                    {navigator.maxTouchPoints > 0 ? "Touch" : "Click in"} and draw your signature in the box below
                </HintText>
                {meta.error && <ErrorText>{meta.error}</ErrorText>}
                <div style={{
                    border: '1rem solid #ccc',
                    // The FormGroup error makes the div 20px narrower. To prevent this changing the width of the
                    // signature box (and therefore us needing to recalculate and wipe it beacuse of the resize)
                    // we alternately toggle some extra margin on the right, so the signature box stays constant size
                    marginRight: meta.error ? '0' : '20px'
                }}>
                    <div style={{ width: 'calc(100%)', aspectRatio: '600 / 185' }}>
                        <canvas
                            ref={canvasRef}
                            style={{
                                display: 'block',
                                width: '100%',
                                height: '100%',
                            }}
                        />
                    </div>
                </div>
                <Button
                    margin={{ direction: 'top', size: 2 }}
                    buttonColour="#f3f2f1"
                    buttonHoverColour="#dbdad9"
                    buttonShadowColour="#929191"
                    buttonTextColour="#0b0c0c"
                    disabled={!touched}
                    onClick={(e) => {
                        e.preventDefault()
                        if (pad) {
                            pad.clear()
                        }
                        setTouched(false)
                        onTouchedChanged(false)
                    }}
                >
                    Clear signature
                </Button>
            </FormGroup>
        </div>
    </>
}

export default PostalVoteForm